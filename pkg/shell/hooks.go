package shell

import (
	"fmt"
	"strings"
)

// GenerateHook generates shell-specific hook code for automatic mvx activation
func GenerateHook(shellType, mvxPath string) (string, error) {
	switch shellType {
	case "bash":
		return generateBashHook(mvxPath), nil
	case "zsh":
		return generateZshHook(mvxPath), nil
	case "fish":
		return generateFishHook(mvxPath), nil
	case "powershell":
		return generatePowerShellHook(mvxPath), nil
	default:
		return "", fmt.Errorf("unsupported shell: %s", shellType)
	}
}

// generateBashHook generates bash shell integration
func generateBashHook(mvxPath string) string {
	return fmt.Sprintf(`# mvx shell integration for bash
# Generated by: mvx activate bash

# Store the original PROMPT_COMMAND
_mvx_original_prompt_command="$PROMPT_COMMAND"

# Current mvx directory (for change detection)
_mvx_current_dir=""

# mvx hook function that runs before each prompt
_mvx_hook() {
    local current_dir="$PWD"

    # Only run if directory changed
    if [ "$current_dir" != "$_mvx_current_dir" ]; then
        _mvx_current_dir="$current_dir"

        # Look for .mvx directory in current or parent directories
        local dir="$current_dir"
        local mvx_dir=""

        while [ "$dir" != "/" ]; do
            if [ -d "$dir/.mvx" ]; then
                mvx_dir="$dir"
                break
            fi
            dir="$(dirname "$dir")"
        done

        if [ -n "$mvx_dir" ]; then
            # Find mvx bootstrap script in project directory
            local mvx_script="$mvx_dir/mvx"
            if [ ! -f "$mvx_script" ]; then
                # Fallback to global mvx if bootstrap script not found
                mvx_script="%s"
            fi

            # Run mvx env to get environment variables
            local env_output
            if env_output=$("$mvx_script" env --shell bash 2>/dev/null); then
                eval "$env_output"
            fi
        fi
    fi
}

# Add mvx hook to PROMPT_COMMAND
if [[ ":$PROMPT_COMMAND:" != *":_mvx_hook:"* ]]; then
    PROMPT_COMMAND="_mvx_hook${PROMPT_COMMAND:+;$PROMPT_COMMAND}"
fi

# Deactivation function
mvx_deactivate() {
    # Restore original PROMPT_COMMAND
    PROMPT_COMMAND="$_mvx_original_prompt_command"
    
    # Unset mvx functions and variables
    unset -f _mvx_hook
    unset -f mvx_deactivate
    unset _mvx_current_dir
    unset _mvx_original_prompt_command
    
    echo "mvx: deactivated"
}
`, mvxPath)
}

// generateZshHook generates zsh shell integration
func generateZshHook(mvxPath string) string {
	return fmt.Sprintf(`# mvx shell integration for zsh
# Generated by: mvx activate zsh

# Current mvx directory (for change detection)
typeset -g _mvx_current_dir=""

# mvx hook function that runs before each prompt
_mvx_hook() {
    local current_dir="$PWD"

    # Only run if directory changed
    if [[ "$current_dir" != "$_mvx_current_dir" ]]; then
        _mvx_current_dir="$current_dir"

        # Look for .mvx directory in current or parent directories
        local dir="$current_dir"
        local mvx_dir=""

        while [[ "$dir" != "/" ]]; do
            if [[ -d "$dir/.mvx" ]]; then
                mvx_dir="$dir"
                break
            fi
            dir="${dir:h}"
        done

        if [[ -n "$mvx_dir" ]]; then
            # Find mvx bootstrap script in project directory
            local mvx_script="$mvx_dir/mvx"
            if [[ ! -f "$mvx_script" ]]; then
                # Fallback to global mvx if bootstrap script not found
                mvx_script="%s"
            fi

            # Run mvx env to get environment variables
            local env_output
            if env_output=$("$mvx_script" env --shell zsh 2>/dev/null); then
                eval "$env_output"
            fi
        fi
    fi
}

# Add mvx hook to precmd (runs before each prompt)
autoload -Uz add-zsh-hook
add-zsh-hook precmd _mvx_hook

# Deactivation function
mvx_deactivate() {
    # Remove hook
    add-zsh-hook -d precmd _mvx_hook
    
    # Unset mvx functions and variables
    unfunction _mvx_hook
    unfunction mvx_deactivate
    unset _mvx_current_dir
    
    echo "mvx: deactivated"
}
`, mvxPath)
}

// generateFishHook generates fish shell integration
func generateFishHook(mvxPath string) string {
	// Fish uses different syntax, so we need to escape it properly
	return fmt.Sprintf(`# mvx shell integration for fish
# Generated by: mvx activate fish

# Current mvx directory (for change detection)
set -g _mvx_current_dir ""

# mvx hook function that runs before each prompt
function _mvx_hook --on-variable PWD
    set -l current_dir $PWD

    # Only run if directory changed
    if test "$current_dir" != "$_mvx_current_dir"
        set -g _mvx_current_dir $current_dir

        # Look for .mvx directory in current or parent directories
        set -l dir $current_dir
        set -l mvx_dir ""

        while test "$dir" != "/"
            if test -d "$dir/.mvx"
                set mvx_dir $dir
                break
            end
            set dir (dirname $dir)
        end

        if test -n "$mvx_dir"
            # Find mvx bootstrap script in project directory
            set -l mvx_script "$mvx_dir/mvx"
            if not test -f "$mvx_script"
                # Fallback to global mvx if bootstrap script not found
                set mvx_script "%s"
            end

            # Run mvx env to get environment variables
            set -l env_output ($mvx_script env --shell fish 2>/dev/null)
            if test $status -eq 0
                eval $env_output
            end
        end
    end
end

# Deactivation function
function mvx_deactivate
    # Remove hook
    functions --erase _mvx_hook
    functions --erase mvx_deactivate
    
    # Unset variables
    set --erase _mvx_current_dir
    
    echo "mvx: deactivated"
end

# Run hook once to activate current directory
_mvx_hook
`, mvxPath)
}

// generatePowerShellHook generates PowerShell integration
func generatePowerShellHook(mvxPath string) string {
	// PowerShell uses different quoting, so we need to be careful
	mvxPathEscaped := strings.ReplaceAll(mvxPath, `\`, `\\`)

	return fmt.Sprintf(`# mvx shell integration for PowerShell
# Generated by: mvx activate powershell

# Current mvx directory (for change detection)
$global:_mvx_current_dir = ""

# mvx hook function that runs before each prompt
function global:_mvx_hook {
    $current_dir = $PWD.Path

    # Only run if directory changed
    if ($current_dir -ne $global:_mvx_current_dir) {
        $global:_mvx_current_dir = $current_dir

        # Look for .mvx directory in current or parent directories
        $dir = $current_dir
        $mvx_dir = $null

        while ($dir -ne "") {
            if (Test-Path (Join-Path $dir ".mvx") -PathType Container) {
                $mvx_dir = $dir
                break
            }
            $parent = Split-Path $dir -Parent
            if ($parent -eq $dir) { break }
            $dir = $parent
        }

        if ($mvx_dir) {
            # Find mvx bootstrap script in project directory
            $mvx_script = Join-Path $mvx_dir "mvx.cmd"
            if (-not (Test-Path $mvx_script)) {
                $mvx_script = Join-Path $mvx_dir "mvx"
            }
            if (-not (Test-Path $mvx_script)) {
                # Fallback to global mvx if bootstrap script not found
                $mvx_script = "%s"
            }

            # Run mvx env to get environment variables
            $env_output = & $mvx_script env --shell powershell 2>$null
            if ($LASTEXITCODE -eq 0) {
                Invoke-Expression $env_output
            }
        }
    }
}

# Store original prompt
if (-not (Test-Path Function:\_mvx_original_prompt)) {
    Copy-Item Function:\prompt Function:\_mvx_original_prompt
}

# Override prompt to include mvx hook
function global:prompt {
    _mvx_hook
    & (Get-Item Function:\_mvx_original_prompt)
}

# Deactivation function
function global:mvx-deactivate {
    # Restore original prompt
    if (Test-Path Function:\_mvx_original_prompt) {
        Copy-Item Function:\_mvx_original_prompt Function:\prompt -Force
        Remove-Item Function:\_mvx_original_prompt
    }
    
    # Remove mvx functions and variables
    Remove-Item Function:\_mvx_hook -ErrorAction SilentlyContinue
    Remove-Item Function:\mvx-deactivate -ErrorAction SilentlyContinue
    Remove-Variable _mvx_current_dir -Scope Global -ErrorAction SilentlyContinue
    
    Write-Host "mvx: deactivated"
}
`, mvxPathEscaped)
}
